_run:
 install_cf: &install_cf
  name: Install cf cli
  command: |
    curl -L "https://cli.run.pivotal.io/stable?release=linux64-binary&source=github" | tar -zx
    sudo mv cf /usr/local/bin
    
version: 2
jobs:
  run-tests:
    docker:
      - image: circleci/node:8.9.4
        environment:
          DATABASE_URL: "postgres://ubuntu@localhost/circle_test"
      - image: postgres:9.6.3
        environment:
            POSTGRES_USER: "ubuntu"
            POSTGRES_DB: "circle_test"
    steps:
      - checkout
      - restore_cache:
          keys:
          - fs-ml-deps-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - fs-ml-deps-
      - run:
          name: Install dependencies
          command: |
            npm install
            sudo npm install -g istanbul
            sudo npm install -g snyk
      - save_cache:
          paths:
            - ./node_modules
          key: fs-ml-deps-{{ checksum "package.json" }}
      - run:
          name: Populate DB
          command: npm run dba
      - run:
          name: Lint check
          command: npm run lint
      - run:
          name: Snyk vulnerability test
          command: |
            set +x
            mkdir -p a=rw snyk
            export DATE_STRING=`date +"%m-%d-%Y-%H"`
            export SNYK_REPORT=snyk-${CIRCLE_PR_REPONAME}-${DATE_STRING}.csv
            snyk test #For human
            snyk test --json > snyk/snyk.json
            sudo cat snyk/snyk.json  \
            | jq -r '["Package", "CVE", "CWE", "Severity", "CVSSScore", "Title", "Disclosure Time", "Description", "Library Paths"], (.vulnerabilities[] | [.packageName, .identifiers.CVE[0], .identifiers.CWE[0], .severity, .cvssScore, .title,.disclosureTime, .description, .from[1], .from[2]] )| @csv' >  \
            "snyk/${SNYK_REPORT}"
      - run:
          name: Run tests
          command: |
            npm run coverage
            ./node_modules/codecov/bin/codecov
      - run:
          name: Clean s3 bucket
          command: ./.circleci/clean-s3-bucket.sh
      - run:
          name: Save Snyk Artifacts
          command: ./.circleci/store-snyk.sh

  prod-deploy:
    docker:
      - image: circleci/node:8.9.4
    steps:
      - checkout
      - run: *install_cf
      - run:
          name: Deploy
          command: |
            if [ "${CIRCLE_PROJECT_USERNAME}" == "18F" ];
              then ./.cg-deploy/deploy.sh api-production;
            fi 
  staging-deploy:
    docker:
      - image: circleci/node:8.9.4
    steps:
      - checkout
      - run: *install_cf
      - run:
          name: Deploy
          command: |
            if [ "${CIRCLE_PROJECT_USERNAME}" == "18F" ];
              then ./.cg-deploy/deploy.sh api-staging;
            fi

  recycle-production:
    docker:
      - image: circleci/node:8.9.4
    steps:
      - run: *install_cf
      - run:
          name: Install cf-recycle-plugin 1.0.0 release
          command: |
            curl -L -o cf-recycle-plugin https://github.com/Comcast/cf-recycle-plugin/releases/download/v1.1.0/cf-recycle-plugin-linux
            chmod +x cf-recycle-plugin
            cf install-plugin cf-recycle-plugin -f
      - run:
          name: Login to cloud.gov Production
          command: |
            CF_API="https://api.fr.cloud.gov"
            cf login -a ${CF_API} -u ${CF_USERNAME_PROD} -p ${CF_PASSWORD_PROD}
      - run:
          name: Recycle Production instances
          command: |
            cf t -o usda-forest-service -s api-production
            cf recycle fs-middlelayer-api
            
workflows:
  version: 2
  build-deploy:
    jobs:
      - run-tests
      - recycle-production
      - staging-deploy:
          requires:
            - run-tests
          filters:
            branches:
              only: dev
      - prod-deploy:
          requires:
              - run-tests
          filters:
            branches:
              only: master
  nightly:
      triggers:
        - schedule:
            cron: "0 0 * * *"
            filters:
              branches:
                only:
                  - master
      jobs:
        - run-tests
        - recycle-production:
            requires:
              - run-tests
  
